<?php 
require(APPPATH . 'libraries/Rest.php');

class CheckOut extends Rest
{
	public function __construct()
	{
		parent::__construct();
	}

	public function getAllDO_get()
	{
		$this->load->model('M_CFSAPDOSO');
		$kode_distributor 	= $this->input->get('KODE_DISTRIBUTOR');
		$data_hasil 		= $this->M_CFSAPDOSO->getAllNomorDO(['KODE_DISTRIBUTOR' => $kode_distributor, 'CUST_GROUP' => CUST_GROUP_DISTRIBUTOR, 'JENIS_PENGIRIMAN' => 'AS', 'STATUS' => 'Accepted']);
		$this->response($data_hasil);
	}

	public function getAllDOToko_post()
	{
		$this->load->model('M_CFSAPDOSO');
		$this->load->model('M_VALLCustomer');

		$latitude 			= (double) $this->input->post('LATITUDE');
		$longitude 			= (double) $this->input->post('LONGITUDE');
		$kode_distributor 	= $this->input->post('KODE_DISTRIBUTOR');

		// cari semua toko

		$cust_cond 	= [
			'MANUAL'=> " AND (A.LATITUDE IS NOT NULL AND A.LONGITUDE IS NOT NULL) AND A.CUST_GROUP = '02'"
		];
		$toko 		= $this->M_VALLCustomer->getAllCustomer($cust_cond);

		$match_toko = [];

		// ambil radius dalam meternya
		$radius 	= 500; // satuan m, 1km = 1000m
		// var_dump($toko); exit;

		if(count($toko) > 0){
			for($i = 0; $i < count($toko); $i++){
				$lat_toko 	= (double) str_replace(',', '.', $toko[$i]['LATITUDE']);
				$lng_toko 	= (double) str_replace(',', '.', $toko[$i]['LONGITUDE']);
				$k_toko 	= $toko[$i]['CUST_NUMBER'];

				$jarak = self::distance($latitude, $longitude, $lat_toko, $lng_toko, 'M');

				if($jarak < $radius){
					$match_toko []= $k_toko;

					$data_toko []= $toko[$i];
				}
			}
		}
		// cari data do dgn toko dan distributor itu

		if(count($match_toko) > 0){
			$do_cond 	= [
				'KODE_DISTRIBUTOR'		=> $kode_distributor,
				'KODE_TOKO_IN' 			=> $match_toko,
				'JENIS_PENGIRIMAN'		=> 'AS'
			];
			$data_hasil = $this->M_CFSAPDOSO->getAllDOTokoCheckOut($do_cond);

			if(count($data_hasil) > 0){
				$data_akhir["donumber"] = [];
				$data_akhir["toko"] 	= [];

				for($i = 0; $i < count($data_hasil); $i++){
					$single_data['id'] 		= $data_hasil[$i]['NOMOR_DO'];
					array_push($data_akhir["donumber"], $single_data);
				}

				for($a = 0; $a < count($data_toko); $a++){
					$data_toko[$a]['NAMA_TOKO'] 	= isNotNullAndEmpty($data_toko[$a]['NAME1'])? $data_toko[$a]['NAME1'] : $data_toko[$a]['NAME2'];
					$data_toko[$a]['ALAMAT_TOKO'] 	= isNotNullAndEmpty($data_toko[$a]['ADDRESS2'])? $data_toko[$a]['ADDRESS2'] : $data_toko[$a]['ADDRESS1'];
					$data_toko[$a]['LONGITUDE'] 	= isNotNullAndEmpty($data_toko[$a]['LONGITUDE'])? str_replace(',', '.', $data_toko[$a]['LONGITUDE']) : '';
					$data_toko[$a]['LATITUDE'] 		= isNotNullAndEmpty($data_toko[$a]['LATITUDE'])? str_replace(',', '.', $data_toko[$a]['LATITUDE']) : '';

					array_push($data_akhir["toko"], $data_toko[$a]);
				}

				$data_hasil = $data_akhir;
				
			}
			else{
				$data_hasil = [];
			}
		}
		else{
			$data_hasil = [];
		}
			

		$this->response($data_hasil);
	}

	function distance($lat1, $lon1, $lat2, $lon2, $unit) {

  		$theta 	= $lon1 - $lon2;
  		$dist 	= sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
  		$dist 	= acos($dist);
  		$dist 	= rad2deg($dist);
  		$miles 	= $dist * 60 * 1.1515;
  		$unit 	= strtoupper($unit);

  		if ($unit == "M") {
      		return ($miles * 1609.34);
  		} else if ($unit == "K") {
      		return ($miles * 1.609344);
  		} else {
      		return $miles;
  		}
	}

	public function getDetailDOTracking_get()
	{
		$this->load->model('M_Tracking');
		$nomor_do 	= $this->input->get('NOMOR_DO');
		$data		= $this->M_Tracking->getDetailDOTracking(['NOMOR_DO' => $nomor_do]);

		if(count($data) > 0){
			$data_hasil[] = [
				'KODE_DISTRIBUTOR' 	=> isNotNullAndEmpty($data['KODE_DISTRIBUTOR'])? $data['KODE_DISTRIBUTOR'] : '',
				'NAMA_DISTRIBUTOR' 	=> isNotNullAndEmpty($data['NAMA_DISTRIBUTOR'])? $data['NAMA_DISTRIBUTOR'] : '',
				'ALAMAT_DISTRIBUTOR'=> isNotNullAndEmpty($data['ALAMAT_DISTRIBUTOR'])? $data['ALAMAT_DISTRIBUTOR'] : '',
				
				'KODE_TOKO' 		=> isNotNullAndEmpty($data['CUST_NUMBER'])? $data['CUST_NUMBER'] : '',
				'NAMA_TOKO' 		=> isNotNullAndEmpty($data['NAME1'])? $data['NAME1'] : '',
				'ALAMAT_TOKO' 		=> isNotNullAndEmpty($data['ADDRESS2'])? $data['ADDRESS2'] : $data['ADDRESS1'],
				'LATITUDE_TOKO'		=> isNotNullAndEmpty($data['LATITUDE'])? str_replace(',', '.', $data['LATITUDE']) : '',
				'LONGITUDE_TOKO'	=> isNotNullAndEmpty($data['LONGITUDE'])? str_replace(',', '.', $data['LONGITUDE']) : '',

				'TANGGAL_DO'		=> isNotNullAndEmpty($data['DO_ERDAT'])? date('d-m-Y', strtotime($data['DO_ERDAT'])) : '',
				'NOMOR_DO'			=> $nomor_do,
				'QUANTITY'			=> isNotNullAndEmpty($data['DO_LFIMG'])? $data['DO_LFIMG'] . '' . $data['DO_MEINS']  : '',
				'TANGGAL_SAMPAI'	=> isNotNullAndEmpty($data['TANGGAL_SAMPAI'])? date('d-m-Y', strtotime($data['TANGGAL_SAMPAI'])) : '',
				'WAKTU_SAMPAI'		=> isNotNullAndEmpty($data['WAKTU_SAMPAI'])? date('H:i:s', strtotime($data['WAKTU_SAMPAI'])) : '',
				'FOTO_SAMPAI'		=> isNotNullAndEmpty($data['FOTO_SAMPAI'])? $data['FOTO_SAMPAI'] : '',
				'DATE_TIME_SAMPAI'	=> isNotNullAndEmpty($data['TANGGAL_SAMPAI'])? date('Ymd H:i:s', strtotime($data['TANGGAL_SAMPAI'].' '. $data['WAKTU_SAMPAI'])) : '',
				'ID_TRACKING'		=> isNotNullAndEmpty($data['ID_TRACKING'])? $data['ID_TRACKING'] : '',
				'DURASI_BONGKAR'	=> isNotNullAndEmpty($data['DURASI_BONGKAR'])? str_replace('.000000', '', $data['DURASI_BONGKAR']) : '',
			];
		}
		else{
			$data_hasil = [];
		}

		$this->response($data_hasil);
	}

    public function isValidJSON($str) {
       json_decode($str);
       return json_last_error() == JSON_ERROR_NONE;
    }

    public function getDataFromApp(){
        if(isset($GLOBALS['HTTP_RAW_POST_DATA'])){
            $dataJson = $GLOBALS['HTTP_RAW_POST_DATA'];
        }
        else{
            $dataJson = file_get_contents('php://input');
        }

        if (strlen($dataJson) > 0 && self::isValidJSON($dataJson)){
            $value = json_decode($dataJson, true);

            if(isset($value[0]) && is_array($value[0])){
                $value = $value[0];
            }

            return $value;
        }

        return false;
    }

	public function update_post()
	{
		$this->load->model('M_Tracking');
		$token 				= $this->check_token_post2();

		$id_tracking = $this->input->post('ID_TRACKING');

		$data_update = [
			'TANGGAL_SELESAI'	=> $this->input->post('TANGGAL_SELESAI'),
			'WAKTU_SELESAI'		=> $this->input->post('WAKTU_SELESAI'),
			'LATITUDE_SELESAI'	=> $this->input->post('LATITUDE_SELESAI'),
			'LONGITUDE_SELESAI'	=> $this->input->post('LONGITUDE_SELESAI'),
			'FOTO_SELESAI'		=> $id_tracking . "_SELESAI.jpg",
			'DURASI_BONGKAR'	=> str_replace('.000000', '',$this->input->post('DURASI_BONGKAR')),
			'UPDATED_DATE'		=> date('d-m-Y'),
			'UPDATED_TIME'		=> date('H:i:s'),
			'UPDATED_BY'		=> $this->input->post('UPDATED_BY')
		];

		$status = $this->M_Tracking->updateTracking($data_update, $id_tracking);

		if($status > 0){

			// upload image
			$FOTO 		= $_POST['FOTO_SELESAI'];
			$basepath 	= FCPATH . 'uploads/images/';
			$filename 	= $id_tracking. '_SELESAI.jpg';
			$filepath 	= $basepath . $filename;
			$file 		= fopen($filepath, 'wb');
			fwrite($file, base64_decode($FOTO));
			fclose($file);

			$response       = [
                'status'    => 'success',
                'message'   => 'Data berhasil disimpan!'
            ];
            $this->response($response);
            exit;
		}
		else{
			$response       = [
                'status'    => 'failed',
                'message'   => 'Data gagal disimpan!'
            ];
            $this->response($response);
            exit;
		}

		$this->response($data_hasil);
	}

	public function getAllDOTokoByDO_post()
	{
		$this->load->model('M_CFSAPDOSO');
		$this->load->model('M_VALLCustomer');
		$this->load->model('M_SetupApplication');
		$this->load->model('M_Tracking');
		
		$token 				= $this->check_token_post();

		$latitude 			= (double) $this->input->post('LATITUDE');
		$longitude 			= (double) $this->input->post('LONGITUDE');
		$kode_distributor 	= $this->input->post('KODE_DISTRIBUTOR');
		$nomor_do 			= $this->input->post('NOMOR_DO');

		if($nomor_do != null){
			$cust_cond 	= [
				'MANUAL'=> " AND (A.LATITUDE IS NOT NULL AND A.LONGITUDE IS NOT NULL) AND A.CUST_GROUP = '02'"
			];
			$toko 		= $this->M_VALLCustomer->getAllCustomer($cust_cond);

			$match_toko = [];

			// ambil radius dalam meternya
			// $radius 	= 500; // satuan m, 1km = 1000m
			$radius 	= $this->M_SetupApplication->get_row(['ID' => 4]);

			if(count($radius) > 0){
				$radius = (float) $radius['SETUP_VALUE'];
			}
			else{
				$radius = 300.0;
			};

			if(count($toko) > 0){
				for($i = 0; $i < count($toko); $i++){
					$lat_toko 	= (double) str_replace(',', '.', $toko[$i]['LATITUDE']);
					$lng_toko 	= (double) str_replace(',', '.', $toko[$i]['LONGITUDE']);
					$k_toko 	= $toko[$i]['CUST_NUMBER'];

					$jarak = self::distance($latitude, $longitude, $lat_toko, $lng_toko, 'M');

					if($jarak < $radius){
						$match_toko []= $k_toko;

						$data_toko []= $toko[$i];
					}
				}
			}

			if(count($match_toko) > 0){
				$do_cond 	= [
					'KODE_DISTRIBUTOR'		=> $kode_distributor,
					'KODE_TOKO_IN' 			=> $match_toko,
					'JENIS_PENGIRIMAN'		=> 'AS',
					'NOMOR_DO'				=> $nomor_do,
					'WHERE_MANUAL'			=> " A.DO_H_VBELN IN (SELECT NOMOR_DO FROM ". LEGACY .".POD_TRACKING WHERE KODE_DISTRIBUTOR = '". $kode_distributor ."')"
				];
				$data_hasil 				= $this->M_CFSAPDOSO->getAllDOToko($do_cond);

				if(count($data_hasil) > 0){
					$check_out 	= $this->M_Tracking->get_row(['NOMOR_DO' => $nomor_do]);

					if(count($check_out) > 0){
						if(isset($check_out['WAKTU_SELESAI']) && isNotNullAndEmpty($check_out['WAKTU_SELESAI'])){
							$data_hasil = 'Maaf, Nomor DO telah Check Out';
						}
						else{
							$data_hasil = 'berhasil';
						}
					}
					else{
						$data_hasil = 'Maaf, Nomor DO tidak ada';
					}

								
				}
				else{
					$data_hasil = 'Maaf, Nomor DO tidak ada';
				}
			}
			else{
				$data_hasil = 'Maaf, anda tidak berada dikawasan toko';
			}
		}
		else{
			$data_hasil = 'Maaf, Nomor DO tidak ada';
		}	

		$this->response($data_hasil);
		
	}

}

?>